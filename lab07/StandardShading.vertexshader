#version 330 core

// input vertex, UV coordinates and normal
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec3 vertexNormal_modelspace;
layout(location = 2) in vec2 vertexUV;

// Output data ; will be interpolated for each fragment.

struct Light {
    vec4 La;
    vec4 Ld;
    vec4 Ls;
    vec3 lightPosition_worldspace;
    float power;
    vec4 lcolor;
};
// Values that stay constant for the whole mesh.
uniform Light light;
uniform mat4 V;
uniform mat4 M;
uniform mat4 P;
uniform mat4 lightVP;
uniform vec2 ScaleMatrix;

out vec3 Normal;

out vec4 vertex_position_cameraspace;
out vec4 vertex_normal_cameraspace;
out vec4 light_position_cameraspace;
out vec2 vertex_UV;
out vec2 vertex_UV_scaled;
out vec4 vertex_position_lightspace;
out vec3 vertex_position_worldspace;

void main() {
    // vertex position
    Normal = mat3(transpose(inverse(M))) *vertexNormal_modelspace; 
    gl_Position =  P * V * M * vec4(vertexPosition_modelspace, 1);
    vertex_position_worldspace = (M * vec4(vertexPosition_modelspace, 1)).xyz;
    vertex_normal_cameraspace = V * M * vec4(vertexNormal_modelspace, 0);
    light_position_cameraspace = V * vec4(light.lightPosition_worldspace, 1);
    vertex_UV = vertexUV;
    vertex_position_lightspace = lightVP * M * vec4(vertexPosition_modelspace, 1);
    vertex_UV_scaled = vertexUV * ScaleMatrix;
}
